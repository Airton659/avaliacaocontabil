# analises/variacao.py

import streamlit as st
import plotly.express as px
import pandas as pd

def mostrar_analise_variacao(df_long: pd.DataFrame) -> None:
    """
    Exibe as maiores varia√ß√µes (em tabelas) e o comparativo de saldos por m√™s/ano.
    """
    st.subheader("üîÅ Varia√ß√£o M√™s a M√™s (Real)")
    st.markdown("Esta an√°lise mostra a movimenta√ß√£o mensal real, calculada com base na diferen√ßa entre os saldos acumulados de meses consecutivos.")

    # Filtra dados v√°lidos
    df_var = df_long.dropna(subset=["SaldoAnterior", "ValorMensal", "VariacaoPercentual"]).copy()
    df_var = df_var.replace([float("inf"), float("-inf")], pd.NA).dropna(subset=["VariacaoPercentual"])
    
    # Convers√£o expl√≠cita para garantir tipo num√©rico
    df_var["VariacaoPercentual"] = pd.to_numeric(df_var["VariacaoPercentual"], errors="coerce").fillna(0.0)
    df_var["ValorMensal"] = pd.to_numeric(df_var["ValorMensal"], errors="coerce").fillna(0.0)
    
    df_var = df_var[df_var["VariacaoPercentual"].abs() < 100000]

    # --- An√°lises de Varia√ß√£o (em tabelas) ---

    # üí∞ Varia√ß√µes Absolutas > R$ 3 Milh√µes
    st.markdown("### üí∞ Varia√ß√µes Absolutas > R$ 3 Milh√µes")
    variacoes_3milhoes = df_var[df_var["ValorMensal"].abs() > 3_000_000].sort_values("ValorMensal", ascending=False)
    
    if not variacoes_3milhoes.empty:
        st.dataframe(variacoes_3milhoes, use_container_width=True)
    else:
        st.info("Nenhuma conta teve varia√ß√£o absoluta superior a R$ 3 milh√µes neste per√≠odo.")

    # üîº Varia√ß√µes Percentuais > 50%
    st.markdown("### üîº Varia√ß√µes Percentuais > 50%")
    variacoes_50_percent = df_var[df_var["VariacaoPercentual"].abs() > 50].sort_values("VariacaoPercentual", ascending=False)
    
    if not variacoes_50_percent.empty:
        st.dataframe(variacoes_50_percent, use_container_width=True)
    else:
        st.info("Nenhuma conta teve varia√ß√£o percentual superior a 50% neste per√≠odo.")

    # --- An√°lise Comparativa de Saldos ---
    st.markdown("### üìÖ Comparativo de Saldo Entre Dois Meses para uma Conta Espec√≠fica")

    df_long["Conta Cont√°bil"] = df_long["Conta Cont√°bil"].astype(str)
    contas_opcoes = sorted(df_long["Conta Cont√°bil"].unique())
    conta_escolhida = st.selectbox("Escolha a Conta Cont√°bil:", contas_opcoes)

    meses_ordenados = sorted(df_long["MesReferencia"].dt.to_period('M').unique())
    meses_opcoes = [m.strftime("%b/%Y") for m in meses_ordenados]

    # Garante que os √≠ndices n√£o sejam negativos se houver poucos meses
    index_1 = max(0, len(meses_opcoes) - 2)
    index_2 = max(0, len(meses_opcoes) - 1)

    mes_escolhido_1 = st.selectbox("Escolha o primeiro m√™s:", meses_opcoes, index=index_1)
    mes_escolhido_2 = st.selectbox("Escolha o segundo m√™s:", meses_opcoes, index=index_2)

    if mes_escolhido_1 and mes_escolhido_2 and conta_escolhida:
        df_comparativo = df_long[
            (df_long["Conta Cont√°bil"] == conta_escolhida) &
            (df_long["MesReferencia"].dt.strftime("%b/%Y").isin([mes_escolhido_1, mes_escolhido_2]))
        ].copy()

        df_comparativo.sort_values("MesReferencia", inplace=True)
        df_comparativo['Mes/Ano'] = df_comparativo['MesReferencia'].dt.strftime('%b/%Y')

        if not df_comparativo.empty:
            fig_comparativo = px.bar(
                df_comparativo,
                x="Mes/Ano",
                y="Saldo",
                color="Mes/Ano",
                title=f"Comparativo de Saldo para a Conta {conta_escolhida}",
                labels={"Saldo": "Saldo (R$)", "Mes/Ano": "M√™s de Refer√™ncia"},
                text="Saldo"
            )
            fig_comparativo.update_layout(
                xaxis_title=None,
                yaxis_title="Saldo (R$)",
                hovermode="x unified",
                legend_title_text="M√™s de Refer√™ncia"
            )
            fig_comparativo.update_yaxes(tickprefix="R$ ")
            fig_comparativo.update_traces(texttemplate='R$%{text:,.2f}', textposition='outside')
            st.plotly_chart(fig_comparativo, use_container_width=True)
        else:
            st.info("Dados n√£o encontrados para a conta e meses selecionados.")